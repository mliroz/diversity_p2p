import os
import tempfile
from stats.data import FigureGenerator, FigureLines

from subprocess import call

#TMP_DIR = r"C:\Users\su40274\Desktop\test\tmp"
TMP_DIR = "/tmp"

#GNUPLOT_HOME = r'C:\Program Files (x86)\gnuplot\bin\gnuplot.exe'
GNUPLOT_HOME = "/usr/bin/gnuplot"

class GnuPlotGenerator(FigureGenerator):

    def __init__(self):
        pass

    def draw_figure(self, figure_lines, out_file_name, title=None,
                    script_dir=None):

        (_, script_file) = tempfile.mkstemp(".gpi", "gnu-", TMP_DIR)
        data_files = []

        script_out = open(script_file, "w")
        script_out.write("# File automatically generated by stats.data.GnuPlotGenerator\n")
        script_out.write("set terminal pngcairo dashed\n")
        script_out.write("set output '" + out_file_name + "'\n")

        if title:
            script_out.write("set title '" + title + "'\n")
        script_out.write("set xlabel '" + figure_lines.x_var + "'\n")
        script_out.write("set ylabel '" + figure_lines.y_var + "'\n")

        plot_lines = []
        for idx, line_params in enumerate(figure_lines.lines_params):

            to_remove = []

            # Create data file
            if script_dir:
                data_file = os.path.join(script_dir,"line-" + str(idx) + ".dat")
            else:
                (_, data_file) = tempfile.mkstemp(".dat", "gnu-", TMP_DIR)
                to_remove.append(data_file)

            data_files.append(data_file)
            data_out = open(data_file, "w")
            data_out.write("# File automatically generated by stats.data.GnuPlotGenerator\n")
            for row in figure_lines.lines_values[idx]:
                data_out.write(" ".join(str(x) for x in row) + "\n")
            data_out.close()

            line_title = ", ".join(key + "=" + str(line_params[idx])
                                   for idx, key in enumerate(figure_lines.varying_keys))

            plot_lines.append("'" + data_file + "' u 1:2 w lp title \"" + line_title + "\"")


        script_out.write("plot " + ",\\\n".join(plot_lines) + "\n")
        script_out.close()

        call(GNUPLOT_HOME + " " + script_file)


if __name__ == "__main__":

    params_headers = ["b", "c", "d", "e"]
    params_values = [[1, 0, "v1", "w2"],
                     [2, 0, "v1", "w2"],
                     [3, 0, "v1", "w2"],
                     [4, 0, "v1", "w2"],
                     [1, 1, "v1", "w2"],
                     [2, 1, "v1", "w2"],
                     [3, 1, "v1", "w2"],
                     [1, 1, "v1", "w0"],
                     [2, 1, "v1", "w0"],
                     [3, 1, "v1", "w0"]]

    metrics_headers = ["m1", "m2"]
    metrics_values = [[1,  2],
                      [2,  4],
                      [3,  6],
                      [4,  8],
                      [2,  3],
                      [4,  6],
                      [6,  9],
                      [3,  3],
                      [6,  6],
                      [9,  9]]

    x_var = "b"
    y_var = "m1"


    """params_headers = ["method", "TTL"]
    params_values = [["user-intent", 1],
                    ["user-intent", 1],
                    ["user-intent", 1],
                    ["random", 1],
                    ["random", 1],
                    ["random", 1]]

    metrics_headers = ["nb_nodes", "recall"]
    metrics_values = [[16, 0.75],
                      [153, 0.99],
                      [344, 1],
                      [16, 0.68],
                      [215, 0.99],
                      [880, 1]]

    x_var = "nb_nodes"
    y_var = "recall"
    """

    #fls1 = generate_fig_data(params_headers, params_values,
    #                        metrics_headers, metrics_values,
    #                        x_var, y_var, {"e": "w0"})

    #print "fls",fls1
    #print "-------------"

    #y_var = "m2"
    #fls2 = generate_fig_data(params_headers, params_values,
    #                  metrics_headers, metrics_values,
    #                  x_var, y_var)

    #print fls2

    fls1 = FigureLines(params_headers, params_values,
                             metrics_headers, metrics_values,
                             x_var, y_var)

    print fls1

    fgenerator = GnuPlotGenerator()
    fgenerator.draw_figure(fls1, r"C:\Users\su40274\Desktop\test\try.png", title="Title test")
